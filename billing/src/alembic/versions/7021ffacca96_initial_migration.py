"""Initial migration

Revision ID: 7021ffacca96
Revises: 
Create Date: 2024-06-02 18:24:50.208127

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '7021ffacca96'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('plans',
    sa.Column('plan_id', sa.UUID(), nullable=False),
    sa.Column('title', sa.String(length=120), nullable=False),
    sa.Column('description', sa.String(length=500), server_default='', nullable=False),
    sa.Column('unit', sa.String(length=50), nullable=False),
    sa.Column('period', sa.SmallInteger(), nullable=False),
    sa.Column('price_per_unit', sa.Numeric(precision=8, scale=2), nullable=False),
    sa.Column('payment_type', sa.String(length=50), nullable=False),
    sa.Column('is_multiple', sa.Boolean(), server_default='false', nullable=False),
    sa.Column('is_active', sa.Boolean(), server_default='true', nullable=False),
    sa.Column('created', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint('period >= 0'),
    sa.CheckConstraint('price_per_unit >= 0'),
    sa.PrimaryKeyConstraint('plan_id'),
    sa.UniqueConstraint('title')
    )
    op.create_table('orders',
    sa.Column('order_id', sa.UUID(), nullable=False),
    sa.Column('plan_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('provider', sa.String(length=50), nullable=True),
    sa.Column('payment_link', sa.String(length=2048), server_default='', nullable=False),
    sa.Column('status', sa.String(length=50), server_default='NEW', nullable=False),
    sa.Column('created', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('expired', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['plan_id'], ['plans.plan_id'], ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('order_id')
    )
    op.create_table('order_events',
    sa.Column('event_id', sa.UUID(), nullable=False),
    sa.Column('order_id', sa.UUID(), nullable=False),
    sa.Column('event_type', sa.String(length=50), server_default='', nullable=False),
    sa.Column('description', sa.Text(), server_default='', nullable=False),
    sa.Column('data', postgresql.JSONB(astext_type=sa.Text()), server_default='{}', nullable=False),
    sa.Column('created', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['order_id'], ['orders.order_id'], ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('event_id')
    )
    op.create_table('payments',
    sa.Column('payment_id', sa.UUID(), nullable=False),
    sa.Column('order_id', sa.UUID(), nullable=False),
    sa.Column('data', postgresql.JSONB(astext_type=sa.Text()), server_default='{}', nullable=False),
    sa.Column('created', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['order_id'], ['orders.order_id'], ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('payment_id')
    )
    op.create_table('refunds',
    sa.Column('refund_id', sa.UUID(), nullable=False),
    sa.Column('order_id', sa.UUID(), nullable=False),
    sa.Column('data', postgresql.JSONB(astext_type=sa.Text()), server_default='{}', nullable=False),
    sa.Column('created', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['order_id'], ['orders.order_id'], ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('refund_id')
    )
    op.create_table('subs',
    sa.Column('sub_id', sa.UUID(), nullable=False),
    sa.Column('order_id', sa.UUID(), nullable=False),
    sa.Column('plan_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('user_role', sa.String(length=50), server_default='OWNER', nullable=False),
    sa.Column('status', sa.String(length=50), server_default='ACTIVE', nullable=False),
    sa.Column('created', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('expired', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['order_id'], ['orders.order_id'], ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['plan_id'], ['plans.plan_id'], ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('sub_id'),
    sa.UniqueConstraint('order_id')
    )
    op.create_table('sub_events',
    sa.Column('event_id', sa.UUID(), nullable=False),
    sa.Column('sub_id', sa.UUID(), nullable=False),
    sa.Column('event_type', sa.String(length=50), server_default='', nullable=False),
    sa.Column('description', sa.Text(), server_default='', nullable=False),
    sa.Column('data', postgresql.JSONB(astext_type=sa.Text()), server_default='{}', nullable=False),
    sa.Column('created', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['sub_id'], ['subs.sub_id'], ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('event_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('sub_events')
    op.drop_table('subs')
    op.drop_table('refunds')
    op.drop_table('payments')
    op.drop_table('order_events')
    op.drop_table('orders')
    op.drop_table('plans')
    # ### end Alembic commands ###
